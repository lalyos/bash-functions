: ${DEBUG:=1}

debug() {
  [[ "$DEBUG" ]] && echo "[DEBUG] $@" 1>&2
}

_getQuery() {
  if [[ "$ec2_fields" ]]; then
    echo "$ec2_fields"
  else
    # you can choose fields from the output json:
    # http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#output
    local fields="id: InstanceId"
    #fields="$fields, ami: ImageId"
    fields="$fields, pubIp: PublicIpAddress"
    fields="$fields, privIp: PrivateIpAddress"
    #fields="$fields, state: State.Name"
    fields="$fields, idx: AmiLaunchIndex"
    fields="$fields"', name: join(``, Tags[?Key==`Name`].Value || `[]`)'
    fields="$fields"', owner: join(``, Tags[?Key==`owner`].Value || `[]`)'
    #fields="$fields"', tagz: join(`,`,Tags[].join(`=`,[Key,Value] || `[]`) || `[]`)'

    # simple fields example
    #fields="$fields"', xxx: yyy'

    # field contains jmespath literal
    #fields="$fields"', xxx: `literal`'

    echo "Reservations[].Instances[].{${fields}}"
  fi
}

ec2-list-centos() {
  for r in $(ec2-regions); do
   debug CENTOS in $r:
     aws ec2 describe-images \
         --region $r \
         --filter Name=owner-id,Values=679593333241 \
         | jq '.Images[]|select(.ImageLocation|startswith("aws-marketplace/CentOS-6.5-GA"))|.ImageId' -r
  done
}

ec2-list-all() {
  local filter=$@
  local query="$(_getQuery)"
  [[ "$TRACE" ]] && set -x
  aws ec2 describe-instances $filter --query "$query" --out table
  set +x

}

ec2-ip-by-name() {
  declare name=$1
  : ${name:? filter value for the Name tag is required}

  aws ec2 describe-instances \
    --filters Name=tag:Name,Values=$name \
    --query 'Reservations[].Instances[].{pubIp: PublicIpAddress}' \
    --out text
}

ec2-sudo-ssh-by-name() {
  declare name=$1
  declare user=${2:-ubuntu}
  : ${name:? filter value for the Name tag is required}
  : ${user:? ssh username required}

  local ip=$(ec2-ip-by-name $name)
  debug ssh to $ip
  ssh -t \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -o ControlMaster=auto \
    -o ControlPath=/tmp/%r@%h:%p \
    -o ControlPersist=yes \
    ubuntu@${ip} sudo su
}

ec2-full-access() {
  declare name=$1
  : ${name:? required}

  local group=$( aws ec2 describe-instances \
    --filter Name=tag:Name,Values=$name \
    --query Reservations[0].Instances[0].SecurityGroups[0].GroupId  \
    --out text
  )
  echo group=$group

  aws ec2 authorize-security-group-ingress \
	 --ip-protocol -1 \
	 --cidr-ip=$(curl http://ipecho.net/plain)/32 \
	 --group-id $group
}

ec2-list-filtered() {
  local filterName=${1?:" first param REQUIRED: <filtername> example: instance-state-name"}
  local filterValue=${2:?" second param RREQUIRED: <values> example: running"}
  ec2-list-all --filters Name=$filterName,Values=$filterValue
}

ec2-list-running() {
  ec2-list-filtered instance-state-name running
}

ec2-list-by-name() {
  ec2-list-filtered tag:Name ${1:?"first param REQUIRED: <name>"}
}

ec2-list-by-owner() {
  ec2-list-filtered tag:owner ${1:?"first param REQUIRED: <owner>"}
}

ec2-list-by-tagvalue() {
  ec2-list-filtered
}

ec2-regions() {
  aws ec2 describe-regions --query "Regions[].RegionName" --out text
}

ec2-list-self-images() {
  : ${AWS_OWNER:=755047402263}
  for reg in $(ec2-regions); do
    aws ec2 describe-images \
      --region $reg \
      --filters Name=owner-id,Values=$AWS_OWNER \
      --query "Images[].[ImageId,Name]" \
      --out text | xargs -n 2 echo $reg
  done
}

ec2-delete-image-by-prefix() {
  declare prefix=$1
  : ${prefix:? required}

  for reg in $(ec2-regions); do
    echo === region: $reg
    amis=$( aws ec2 describe-images --owners=self --region $reg \
  	   | jq '.Images[]|select(.Name|startswith("'$prefix'"))|.ImageId ' -r
          )

    for ami in $amis; do
      echo "---> delete: $ami"
      ec2-delete-ami $reg $ami
    done

  done
}

ec2-delete-keys-by-fingerprint() {
  declare fingerprint=$1

  : ${fingerprint:? required}
  for reg in $(aws ec2 describe-regions --query "Regions[].RegionName" --out text); do 
    echo === clean $reg
    aws ec2 describe-key-pairs --region=$reg \
      | jq '.KeyPairs[]|select(.KeyFingerprint=="'$fingerprint'")|.KeyName' -r \
      | xargs -P 20 -t -n 1 --no-run-if-empty -I KEYS bash -c "aws ec2 delete-key-pair --key-name KEYS --region=$reg"
  done
}

ec2-delete-keys-by-prefix() {
  declare keynamePrefix=$1

  : ${keynamePrefix:? required}
  for reg in $(aws ec2 describe-regions --query "Regions[].RegionName" --out text); do 
    echo === clean $reg
    aws ec2 describe-key-pairs --region=$reg \
      | jq '.KeyPairs[]|.KeyName|select(startswith("'$keynamePrefix'"))' -r \
      | xargs -P 20 -t -n 1 --no-run-if-empty -I KEYS bash -c "aws ec2 delete-key-pair --key-name KEYS --region=$reg"
  done
}


ec2-clean-images() {
  local amiWhiteList="ci-2014-06-25\|ci-sequenceiq\|ambari-docker-140716083934"
  ec2-list-self-images | grep -v "$amiWhiteList"|xargs -n 3 echo ec2-delete-ami 
}

ec2-delete-ami() {
  local region=$1
  local ami=$2
  : ${region:? requeired 1. parameter}
  : ${ami:? requeired 2. parameter}

  local name=$(aws ec2 describe-images \
    --region $region \
    --image-ids $ami \
    --query "Images[].Name" \
    --out text
  )

  local snap=$(aws ec2 describe-images \
    --region $region \
    --image-ids $ami \
    --query "Images[].BlockDeviceMappings[].Ebs.SnapshotId" \
    --out text
  )

  echo [ec2-deregister-image] $name
  aws ec2 deregister-image --region $region --image-id $ami --out text
  echo [ec2-delete-snapshot] $snap
  aws ec2 delete-snapshot --region $region --snapshot-id $snap --out text
}

alias ec2-reload-functions='. ~/apps/bin/ec2-functions'
