: ${DEBUG:=1}

debug() {
  [[ "$DEBUG" ]] && echo "[DEBUG] $@" 1>&2
}

_getQuery() {
  if [[ "$ec2_fields" ]]; then
    echo "$ec2_fields"
  else
  # you can choose fields from the output json:
  # http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#output
  local fields="id: InstanceId"
  #fields="$fields, ami: ImageId"
  fields="$fields, pubIp: PublicIpAddress"
  fields="$fields, privIp: PrivateIpAddress"
  #fields="$fields, state: State.Name"
  fields="$fields, idx: AmiLaunchIndex"
  fields="$fields"', name: join(``, Tags[?Key==`Name`].Value || `[]`)'
  #fields="$fields"', owner: join(``, Tags[?Key==`owner`].Value || `[]`)'
  #fields="$fields"', tagz: join(`,`,Tags[].join(`=`,[Key,Value] || `[]`) || `[]`)'

  # simple fields example
  #fields="$fields"', xxx: yyy'

  # field contains jmespath literal
  #fields="$fields"', xxx: `literal`'

  echo "Reservations[].Instances[].{${fields}}"
  fi
}

ec2-list-all() {
  local filter=$@
  aws ec2 describe-instances $filter --query "$(_getQuery)" --out table

}

ec2-list-filtered() {
  local filterName=${1?:" first param REQUIRED: <filtername> example: instance-state-name"}
  local filterValue=${2:?" second param RREQUIRED: <values> example: running"}
  ec2-list-all --filters Name=$filterName,Values=$filterValue
}

ec2-list-running() {
  ec2-list-filtered instance-state-name running
}

ec2-list-by-name() {
  ec2-list-filtered tag:Name ${1:?"first param REQUIRED: <name>"}
}

ec2-list-by-owner() {
  ec2-list-filtered tag:owner ${1:?"first param REQUIRED: <owner>"}
}

ec2-list-by-tagvalue() {
  ec2-list-filtered
}

ec2-regions() {
  aws ec2 describe-regions --query "Regions[].RegionName" --out text
}

ec2-list-self-images() {
  : ${AWS_OWNER:=755047402263}
  for reg in $(ec2-regions); do
    aws ec2 describe-images \
      --region $reg \
      --filters Name=owner-id,Values=$AWS_OWNER \
      --query "Images[].[ImageId,Name]" \
      --out text | xargs -n 2 echo $reg
  done
}

ec2-clean-images() {
  local amiWhiteList="ci-2014-06-25\|ci-sequenceiq\|ambari-docker-140716083934"
  ec2-list-self-images | grep -v "$amiWhiteList"|xargs -n 3 echo ec2-delete-ami 
}

ec2-delete-ami() {
  local region=$1
  local ami=$2
  : ${region:? requeired 1. parameter}
  : ${ami:? requeired 2. parameter}

  local name=$(aws ec2 describe-images \
    --region $region \
    --image-ids $ami \
    --query "Images[].Name" \
    --out text
  )

  local snap=$(aws ec2 describe-images \
    --region $region \
    --image-ids $ami \
    --query "Images[].BlockDeviceMappings[].Ebs.SnapshotId" \
    --out text
  )

  echo [ec2-deregister-image] $name
  aws ec2 deregister-image --region $region --image-id $ami --out text
  echo [ec2-delete-snapshot] $snap
  aws ec2 delete-snapshot --region $region --snapshot-id $snap --out text
}

alias ec2-reload-functions='. ~/apps/bin/ec2-functions'
